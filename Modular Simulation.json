{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "",
            "description": "",
            "hash": "809594c8fb0d53d722126e46724f9bcf73a20364",
            "joint": {
                "cells": [
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'Format_Start_Event' block\n    Format_Start_Event(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "90dd9150-5f28-4f6b-80fb-04a2a7ef641e",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 16,
                        "line_start": 8,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 380,
                            "y": -60
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 1
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all detals of actions \n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Post End Event to Splunk, Post Start Event to Splunk, Post Start Event to Splunk",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "24c47fc4-f8f4-485e-bc1f-15be589d7bc4",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 466,
                        "line_start": 453,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 18,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1720,
                            "y": 360
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 2
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "4dc193f1-805b-4b30-9349-0b3f57747304",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "71f118b1-449a-4e57-aad0-fe4d24e25923",
                            "port": "out-1",
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "8891b45a-715a-40e7-863f-8dc1be3ef024",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 12
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "4651e176-066f-4ea7-bf4a-37bcac8574e4",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "71f118b1-449a-4e57-aad0-fe4d24e25923",
                            "port": "out-2",
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "93fa5b71-e7df-4e5a-a5ee-9d97082b2c39",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 15
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "ca77dad4-b6c1-4e8f-b11a-c021efca928c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d6141597-15a3-451a-ae6c-79bd83d15550",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d10b425d-717c-478a-8fe3-c484a18ff770",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 26
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "ba8aef9f-d378-43ff-a444-fb0870ac1ff3",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "8891b45a-715a-40e7-863f-8dc1be3ef024",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4607ee03-c437-4903-9d01-cbff02ae611d",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 35
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "6071b2c3-e5ff-4b90-9cbf-19659acce3dc",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "4607ee03-c437-4903-9d01-cbff02ae611d",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "21ef810d-17ff-4190-a30b-49982453db83",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 41
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "eb879477-97d9-44fe-aa8a-3894e252676c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "93fa5b71-e7df-4e5a-a5ee-9d97082b2c39",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4607ee03-c437-4903-9d01-cbff02ae611d",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 44
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "432f62ad-af03-4341-ae33-ac9e3c7b9f16",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "71f118b1-449a-4e57-aad0-fe4d24e25923",
                            "port": "out-3",
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(3) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "dae33605-8d09-4498-b004-989cd7dc6d58",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 47
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a422693a-874c-4e03-93b3-79df88f77096",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "dae33605-8d09-4498-b004-989cd7dc6d58",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4607ee03-c437-4903-9d01-cbff02ae611d",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 50
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "985dd52c-63fd-4fce-b409-654135c2933d",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "72c21228-914b-4963-94af-3d781c321f39",
                            "port": "out-1",
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d6141597-15a3-451a-ae6c-79bd83d15550",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 74
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "91f6fe61-c75e-4920-9700-0d25c070a05e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "014b0f8c-bdce-4253-8f41-ffcbc91801c7",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "dbbfadf6-e620-470a-9c80-7555fe5e80f4",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "vertices": [],
                        "z": 81
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "13651bb7-4d8c-4098-8397-c26c679935d1",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "90dd9150-5f28-4f6b-80fb-04a2a7ef641e",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "014b0f8c-bdce-4253-8f41-ffcbc91801c7",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 85
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "fe76de1d-d018-4bb2-9299-207178d1ea70",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "dbbfadf6-e620-470a-9c80-7555fe5e80f4",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "72c21228-914b-4963-94af-3d781c321f39",
                            "port": "in",
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 86
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "700bef39-bad1-4e66-adae-3c53609c8265",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d10b425d-717c-478a-8fe3-c484a18ff770",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "e29675fd-9f55-44ff-9301-8429275e8bcf",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 95
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "bb4d928b-e4c4-4a85-9a3b-fc839e78d09e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "21ef810d-17ff-4190-a30b-49982453db83",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "84d8cf57-de36-483e-bb67-6631cfc4eef9",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 147
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "10b05e59-83bd-480b-9779-91e7e82723a2",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "84d8cf57-de36-483e-bb67-6631cfc4eef9",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "7aca6b7c-11e5-491c-a302-0ae45b6fcc5e",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 148
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "d37cf814-f2ca-4354-a13c-260d30bc5d10",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "7aca6b7c-11e5-491c-a302-0ae45b6fcc5e",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "24c47fc4-f8f4-485e-bc1f-15be589d7bc4",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 151
                    },
                    {
                        "action": "post data",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "data": "format_4:formatted_data",
                            "host": "post_data_1:action_result.parameter.host",
                            "index": "",
                            "source": "post_data_1:action_result.parameter.source",
                            "source_type": "post_data_1:action_result.parameter.source_type"
                        },
                        "angle": 0,
                        "app": "Splunk",
                        "appid": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "approver": "",
                        "assets": [
                            {
                                "action": "post data",
                                "active": true,
                                "app_name": "Splunk",
                                "app_version": "1.3.19",
                                "appid": "",
                                "config_type": "app",
                                "fields": {
                                    "data": "Format_End_Event:formatted_data",
                                    "host": "Post_Start_Event_to_Splunk:action_result.parameter.host",
                                    "index": "",
                                    "source": "Post_Start_Event_to_Splunk:action_result.parameter.source",
                                    "source_type": "Post_Start_Event_to_Splunk:action_result.parameter.source_type"
                                },
                                "has_app": true,
                                "id": 7,
                                "loaded": false,
                                "missing": false,
                                "name": "Splunk",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.data",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.host",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.index",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.source_type",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "data": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Data to post",
                                        "key": "data",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    },
                                    "host": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Host for event",
                                        "key": "host",
                                        "order": 1,
                                        "required": false
                                    },
                                    "index": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Index to send event to",
                                        "key": "index",
                                        "order": 4,
                                        "required": false
                                    },
                                    "source": {
                                        "data_type": "string",
                                        "default": "Phantom",
                                        "description": "Source for event",
                                        "key": "source",
                                        "order": 2,
                                        "required": false
                                    },
                                    "source_type": {
                                        "data_type": "string",
                                        "default": "Automation/Orchestration Platform",
                                        "description": "Type of source for event",
                                        "key": "source_type",
                                        "order": 3,
                                        "required": false
                                    }
                                },
                                "product_name": "Splunk Enterprise",
                                "product_vendor": "Splunk Inc.",
                                "type": ""
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Post End Event to Splunk"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def post_data_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('post_data_2() called')\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'post_data_2' call\n    results_data_1 = phantom.collect2(container=container, datapath=['post_data_1:action_result.parameter.host', 'post_data_1:action_result.parameter.source_type', 'post_data_1:action_result.parameter.source', 'post_data_1:action_result.parameter.context.artifact_id'], action_results=results)\n    formatted_data_1 = phantom.get_format_data(name='format_4')\n\n    parameters = []\n    \n    # build parameters list for 'post_data_2' call\n    for results_item_1 in results_data_1:\n        parameters.append({\n            'index': \"\",\n            'host': results_item_1[0],\n            'source_type': results_item_1[1],\n            'data': formatted_data_1,\n            'source': results_item_1[2],\n            # context (artifact id) is added to associate results with the artifact\n            'context': {'artifact_id': results_item_1[3]},\n        })\n\n    phantom.act(\"post data\", parameters=parameters, app={ \"name\": 'Splunk' }, name=\"post_data_2\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Run End Marker",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Post_End_Event_to_Splunk(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('post_data_2() called')\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'post_data_2' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Post_Start_Event_to_Splunk:action_result.parameter.host', 'Post_Start_Event_to_Splunk:action_result.parameter.source_type', 'Post_Start_Event_to_Splunk:action_result.parameter.source', 'Post_Start_Event_to_Splunk:action_result.parameter.context.artifact_id', 'Post_Start_Event_to_Splunk:action_result.parameter.data', 'Post_Start_Event_to_Splunk:action_result.parameter.index'], action_results=results)\n    formatted_data_1 = phantom.get_format_data(name='format_4')\n\n    parameters = []\n    \n    # build parameters list for 'post_data_2' call\n    for results_item_1 in results_data_1:\n        data_json = results_item_1[4]\n        data = json.loads(data_json)\n        data['msg'] = formatted_data_1\n        data_json = json.dumps(data)\n        parameters.append({\n            'index': results_item_1[5],\n            'host': results_item_1[0],\n            'source_type': results_item_1[1],\n            'data': data_json,\n            'source': results_item_1[2],\n            # context (artifact id) is added to associate results with the artifact\n            'context': {'artifact_id': results_item_1[3]},\n        })\n\n    phantom.act(\"post data\", parameters=parameters, app={ \"name\": 'Splunk' }, name=\"Post_End_Event_to_Splunk\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "Post End Event to Splunk",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "7aca6b7c-11e5-491c-a302-0ae45b6fcc5e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 107,
                        "line_start": 76,
                        "message": "Configuring now",
                        "name": "post data",
                        "notes": "",
                        "number": 2,
                        "order": 4,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1440,
                            "y": 340
                        },
                        "previous_function": "",
                        "previous_name": "Post_End_Event_to_Splunk",
                        "required_params": {
                            "data": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_config",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 295
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "Format End Event"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def format_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('format_4() called')\n    \n    template = \"\"\"Finished red team test: {0}  on machine with IP address: {1}\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"artifact:*.cef.test_id\",\n        \"artifact:*.cef.destinationAddress\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_4\")\n\n    post_data_2(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Run End Marker",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Format_End_Event(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('format_4() called')\n    \n    template = \"\"\"Finished red team test: {0} on machine with IP address: {1}\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"artifact:*.cef.act\",\n        \"artifact:*.cef.destinationAddress\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_4\")\n\n    Post_End_Event_to_Splunk(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Format End Event",
                        "description": "",
                        "format": "format",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "84d8cf57-de36-483e-bb67-6631cfc4eef9",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 124,
                        "line_start": 107,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "",
                        "number": 4,
                        "order": 5,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "artifact:*.cef.test_id"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "artifact:*.cef.destinationAddress"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1440,
                            "y": 200
                        },
                        "previous_function": "",
                        "previous_name": "Format_End_Event",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "Finished red team test: {0}  on machine with IP address: {1}",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 298
                    },
                    {
                        "action": "run script",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "async": "",
                            "command_id": "",
                            "ip_hostname": "write_started_event:action_result.parameter.ip_hostname",
                            "parser": "",
                            "script_file": "",
                            "script_str": "format_2:formatted_data",
                            "shell_id": ""
                        },
                        "angle": 0,
                        "app": "Windows Remote Management",
                        "appid": "a0222b95-b006-4c9e-9578-1428defcec0f",
                        "approver": "",
                        "assets": [
                            {
                                "action": "run script",
                                "active": true,
                                "app_name": "Windows Remote Management",
                                "app_version": "1.0.15",
                                "appid": "",
                                "config_type": "app",
                                "fields": {
                                    "async": "",
                                    "command_id": "",
                                    "ip_hostname": "Run_Start_Marker:action_result.parameter.ip_hostname",
                                    "parser": "",
                                    "script_file": "",
                                    "script_str": "Format_End_Marker:formatted_data",
                                    "shell_id": ""
                                },
                                "has_app": true,
                                "id": 128,
                                "loaded": false,
                                "missing": false,
                                "name": "Windows Remote Management",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.async",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.parameter.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_path": "action_result.parameter.ip_hostname",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.parser",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.script_file",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.script_str",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.parameter.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_err",
                                        "data_type": "string",
                                        "example_values": [
                                            "Error message"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_out",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successful output"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.summary.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.summary.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Message",
                                        "column_order": 0,
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "async": {
                                        "data_type": "boolean",
                                        "default": false,
                                        "description": "Start the command, but don't wait for output",
                                        "key": "async",
                                        "order": 4,
                                        "required": false
                                    },
                                    "command_id": {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Command ID of async command (Provide with shell_id)",
                                        "key": "command_id",
                                        "order": 5,
                                        "primary": true,
                                        "required": false
                                    },
                                    "ip_hostname": {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP/Hostname",
                                        "key": "ip_hostname",
                                        "order": 0,
                                        "required": true
                                    },
                                    "parser": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a custom parser to use for output",
                                        "key": "parser",
                                        "order": 3,
                                        "primary": true,
                                        "required": false
                                    },
                                    "script_file": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a PowerShell script to run",
                                        "key": "script_file",
                                        "order": 1,
                                        "primary": true,
                                        "required": false
                                    },
                                    "script_str": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "A PowerShell script to run",
                                        "key": "script_str",
                                        "order": 2,
                                        "primary": true,
                                        "required": false
                                    },
                                    "shell_id": {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Shell ID of async command (Provide with command_id)",
                                        "key": "shell_id",
                                        "order": 6,
                                        "required": false
                                    }
                                },
                                "product_name": "Windows Remote Management",
                                "product_vendor": "Microsoft",
                                "type": ""
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Run End Marker"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Run_End_Marker(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('Run_End_Marker() called')\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Run_End_Marker' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Run_Start_Marker:action_result.parameter.ip_hostname', 'Run_Start_Marker:action_result.parameter.context.artifact_id'], action_results=results)\n    formatted_data_1 = phantom.get_format_data(name='Format_End_Marker')\n\n    parameters = []\n    \n    # build parameters list for 'Run_End_Marker' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'shell_id': \"\",\n                'parser': \"\",\n                'ip_hostname': results_item_1[0],\n                'async': \"\",\n                'script_str': formatted_data_1,\n                'script_file': \"\",\n                'command_id': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(\"run script\", parameters=parameters, app={ \"name\": 'Windows Remote Management' }, callback=Format_End_Event, name=\"Run_End_Marker\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Run Powershell Test, Run Cmd Test, Run User Supplied Cmd",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Run End Marker",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "21ef810d-17ff-4190-a30b-49982453db83",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 154,
                        "line_start": 124,
                        "message": "Configuring now",
                        "name": "run script",
                        "notes": "",
                        "number": 3,
                        "order": 6,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1440,
                            "y": 60
                        },
                        "previous_function": "",
                        "previous_name": "Run_End_Marker",
                        "required_params": {
                            "ip_hostname": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_config",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 302
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "e3134f5a-01ae-4df0-a886-db19ef74264c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "72c21228-914b-4963-94af-3d781c321f39",
                            "port": "out-2",
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "12bc6b34-2fe6-48fa-abdf-1bd71b6f3690",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 303
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 2
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-2": {
                                "port": {
                                    "id": "out-3",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": -2
                            },
                            ".outPorts>.port-2>.port-body": {
                                "port": {
                                    "id": "out-3",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('decision_2() called')\n\n    # check for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.os\", \"==\", \"windows\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched_artifacts_1 or matched_results_1:\n        Format_Start_Marker(action=action, success=success, container=container, results=results, handle=handle)\n        return\n\n    # check for 'elif' condition 2\n    matched_artifacts_2, matched_results_2 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.os\", \"==\", \"linux\"],\n        ])\n\n    # call connected blocks if condition 2 matched\n    if matched_artifacts_2 or matched_results_2:\n        TODO_Run_Linux_Test(action=action, success=success, container=container, results=results, handle=handle)\n        return\n\n    # check for 'elif' condition 3\n    matched_artifacts_3, matched_results_3 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.os\", \"==\", \"macos\"],\n        ])\n\n    # call connected blocks if condition 3 matched\n    if matched_artifacts_3 or matched_results_3:\n        TODO_Run_Mac_Test(action=action, success=success, container=container, results=results, handle=handle)\n        return\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Post Start Event to Splunk",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": false,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "72c21228-914b-4963-94af-3d781c321f39",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 198,
                        "line_start": 154,
                        "name": "decision",
                        "notes": "",
                        "number": 2,
                        "order": 7,
                        "outPorts": [
                            "out-1",
                            "out-2",
                            "out-3"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "artifact:*.cef.os",
                                        "value": "windows"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "artifact:*.cef.os",
                                        "value": "linux"
                                    }
                                ],
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "artifact:*.cef.os",
                                        "value": "macos"
                                    }
                                ],
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 640,
                            "y": -20
                        },
                        "previous_function": "",
                        "previous_name": "decision_2",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 306
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "set status",
                        "attrs": {
                            ".api": {
                                "text": "TODO Run Linux Test"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes code": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_off.svg"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def TODO_Run_Linux_Test(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('TODO_Run_Linux_Test() called')\n\n    phantom.set_status(container, \"closed\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "key": "set-status",
                                "setStatusStatus": "closed"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "Post Start Event to Splunk",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "TODO Run Linux Test",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "12bc6b34-2fe6-48fa-abdf-1bd71b6f3690",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 205,
                        "line_start": 198,
                        "message": "Configuring now",
                        "name": "set status",
                        "notes": "",
                        "number": 1,
                        "order": 8,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 720,
                            "y": 460
                        },
                        "previous_function": "",
                        "previous_name": "TODO_Run_Linux_Test",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 307
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f1f0b1d1-e180-45eb-a3f2-660055502236",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "72c21228-914b-4963-94af-3d781c321f39",
                            "port": "out-3",
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(3) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d03e9d89-33a7-4962-9248-07388a7629ac",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 308
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "set status",
                        "attrs": {
                            ".api": {
                                "text": "TODO Run Mac Test"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes code": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_off.svg"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def TODO_Run_Mac_Test(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('TODO_Run_Mac_Test() called')\n\n    phantom.set_status(container, \"closed\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "key": "set-status",
                                "setStatusStatus": "closed"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "Post Start Event to Splunk",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "TODO Run Mac Test",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "d03e9d89-33a7-4962-9248-07388a7629ac",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 212,
                        "line_start": 205,
                        "message": "Configuring now",
                        "name": "set status",
                        "notes": "",
                        "number": 2,
                        "order": 9,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 720,
                            "y": -240
                        },
                        "previous_function": "",
                        "previous_name": "TODO_Run_Mac_Test",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 309
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f3f085b7-44c5-4e9d-ac9a-8c3eb6d4e3ae",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "12bc6b34-2fe6-48fa-abdf-1bd71b6f3690",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "24c47fc4-f8f4-485e-bc1f-15be589d7bc4",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "vertices": [
                            {
                                "x": 1680,
                                "y": 500
                            }
                        ],
                        "z": 311
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "Format Start Event"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def format_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('format_3() called')\n    \n    template = \"\"\"Started red team test: {0}  on machine with IP address: {1}\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"artifact:*.cef.test_id\",\n        \"artifact:*.cef.destinationAddress\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_3\")\n\n    post_data_1(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "def Format_Start_Event(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('format_3() called')\n    \n    template = \"\"\"Started red team test: {0} on machine with IP address: {1}\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"artifact:*.cef.act\",\n        \"artifact:*.cef.destinationAddress\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_3\")\n\n    Post_Start_Event_to_Splunk(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Format Start Event",
                        "description": "",
                        "format": "format",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "014b0f8c-bdce-4253-8f41-ffcbc91801c7",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 229,
                        "line_start": 212,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "",
                        "number": 3,
                        "order": 10,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "artifact:*.cef.test_id"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "artifact:*.cef.destinationAddress"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 380,
                            "y": 40
                        },
                        "previous_function": "",
                        "previous_name": "Format_Start_Event",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "Started red team test: {0}  on machine with IP address: {1}",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 315
                    },
                    {
                        "action": "run command",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "arguments": "",
                            "async": "",
                            "command": "artifact:*.cef.command",
                            "command_id": "",
                            "ip_hostname": "write_started_event:action_result.parameter.ip_hostname",
                            "parser": "",
                            "shell_id": ""
                        },
                        "angle": 0,
                        "app": "Windows Remote Management",
                        "appid": "a0222b95-b006-4c9e-9578-1428defcec0f",
                        "approver": "",
                        "assets": [
                            {
                                "action": "run command",
                                "active": true,
                                "app_name": "Windows Remote Management",
                                "app_version": "1.0.15",
                                "appid": "",
                                "config_type": "app",
                                "fields": {
                                    "arguments": "",
                                    "async": "",
                                    "command": "artifact:*.cef.command",
                                    "command_id": "",
                                    "ip_hostname": "Run_Start_Marker:action_result.parameter.ip_hostname",
                                    "parser": "",
                                    "shell_id": ""
                                },
                                "has_app": true,
                                "id": 128,
                                "loaded": false,
                                "missing": false,
                                "name": "Windows Remote Management",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.arguments",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.async",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "data_path": "action_result.parameter.command",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.parameter.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_path": "action_result.parameter.ip_hostname",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.parser",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.parameter.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_err",
                                        "data_type": "string",
                                        "example_values": [
                                            "Error message"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_out",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successful output"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.summary.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.summary.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Message",
                                        "column_order": 0,
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "arguments": {
                                        "data_type": "string",
                                        "default": "",
                                        "description": "The arguments for the command",
                                        "key": "arguments",
                                        "order": 2,
                                        "required": false
                                    },
                                    "async": {
                                        "data_type": "boolean",
                                        "default": false,
                                        "description": "Start the command, but don't wait for output",
                                        "key": "async",
                                        "order": 4,
                                        "required": false
                                    },
                                    "command": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The command to be run",
                                        "key": "command",
                                        "order": 1,
                                        "required": false
                                    },
                                    "command_id": {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Command ID of async command (Provide with shell_id)",
                                        "key": "command_id",
                                        "order": 5,
                                        "primary": true,
                                        "required": false
                                    },
                                    "ip_hostname": {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP/Hostname",
                                        "key": "ip_hostname",
                                        "order": 0,
                                        "required": true
                                    },
                                    "parser": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a custom parser to use for output",
                                        "key": "parser",
                                        "order": 3,
                                        "primary": true,
                                        "required": false
                                    },
                                    "shell_id": {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Shell ID of async command (Provide with command_id)",
                                        "key": "shell_id",
                                        "order": 6,
                                        "required": false
                                    }
                                },
                                "product_name": "Windows Remote Management",
                                "product_vendor": "Microsoft",
                                "type": ""
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Run User Supplied Cmd"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Run_User_Supplied_Cmd(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('Run_User_Supplied_Cmd() called')\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Run_User_Supplied_Cmd' call\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.command', 'artifact:*.id'])\n    results_data_1 = phantom.collect2(container=container, datapath=['Run_Start_Marker:action_result.parameter.ip_hostname', 'Run_Start_Marker:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Run_User_Supplied_Cmd' call\n    for container_item in container_data:\n        for results_item_1 in results_data_1:\n            if results_item_1[0]:\n                parameters.append({\n                    'shell_id': \"\",\n                    'parser': \"\",\n                    'ip_hostname': results_item_1[0],\n                    'command': container_item[0],\n                    'arguments': \"\",\n                    'async': \"\",\n                    'command_id': \"\",\n                    # context (artifact id) is added to associate results with the artifact\n                    'context': {'artifact_id': results_item_1[1]},\n                })\n\n    phantom.act(\"run command\", parameters=parameters, app={ \"name\": 'Windows Remote Management' }, callback=join_Format_End_Marker, name=\"Run_User_Supplied_Cmd\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Format ART Command",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Run User Supplied Cmd",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "dae33605-8d09-4498-b004-989cd7dc6d58",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 260,
                        "line_start": 229,
                        "message": "Configuring now",
                        "name": "run command",
                        "notes": "",
                        "number": 2,
                        "order": 11,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1180,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "Run_User_Supplied_Cmd",
                        "required_params": {
                            "ip_hostname": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_config",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 321
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "Format Start Marker"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def format_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('format_1() called')\n    \n    template = \"\"\"eventcreate /id 999 /D \\\"started test on {0} guid=\\\" /T INFORMATION /L application\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"artifact:*.cef.destinationAddress\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_1\")\n\n    write_started_event(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Post Start Event to Splunk",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Format_Start_Marker(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('format_1() called')\n    \n    playbook_info = phantom.get_playbook_info()\n    guid = phantom.get_data(playbook_info[0]['id'], clear_data=False)\n    \n    template = \"eventcreate /id 999 /D \\\"started test on {0} guid=%s\\\" /T INFORMATION /L application\" % guid\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"artifact:*.cef.destinationAddress\"\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"Format_Start_Marker\")\n\n    Run_Start_Marker(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Format Start Marker",
                        "description": "",
                        "format": "format",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "d6141597-15a3-451a-ae6c-79bd83d15550",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 279,
                        "line_start": 260,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "",
                        "number": 1,
                        "order": 12,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "artifact:*.cef.destinationAddress"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 780,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "Format_Start_Marker",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "eventcreate /id 999 /D \"started test on {0} guid=\" /T INFORMATION /L application",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 330
                    },
                    {
                        "action": "post data",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "data": "format_3:formatted_data",
                            "host": "aws_phantom",
                            "index": "",
                            "source": "Phantom",
                            "source_type": "Automation/Orchestration Platform"
                        },
                        "angle": 0,
                        "app": "Splunk",
                        "appid": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "approver": "",
                        "assets": [
                            {
                                "action": "post data",
                                "active": true,
                                "app_name": "Splunk",
                                "app_version": "1.3.19",
                                "appid": "",
                                "config_type": "app",
                                "fields": {
                                    "data": "Format_Start_Event:formatted_data",
                                    "host": "aws_phantom",
                                    "index": "",
                                    "source": "Phantom",
                                    "source_type": "Automation/Orchestration Platform"
                                },
                                "has_app": true,
                                "id": 7,
                                "loaded": false,
                                "missing": false,
                                "name": "Splunk",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.data",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.host",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.index",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.source_type",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "data": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Data to post",
                                        "key": "data",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    },
                                    "host": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Host for event",
                                        "key": "host",
                                        "order": 1,
                                        "required": false
                                    },
                                    "index": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Index to send event to",
                                        "key": "index",
                                        "order": 4,
                                        "required": false
                                    },
                                    "source": {
                                        "data_type": "string",
                                        "default": "Phantom",
                                        "description": "Source for event",
                                        "key": "source",
                                        "order": 2,
                                        "required": false
                                    },
                                    "source_type": {
                                        "data_type": "string",
                                        "default": "Automation/Orchestration Platform",
                                        "description": "Type of source for event",
                                        "key": "source_type",
                                        "order": 3,
                                        "required": false
                                    }
                                },
                                "product_name": "Splunk Enterprise",
                                "product_vendor": "Splunk Inc.",
                                "type": ""
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Post Start Event to Splun..."
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_error.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def post_data_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('post_data_1() called')\n\n    # collect data for 'post_data_1' call\n    formatted_data_1 = phantom.get_format_data(name='format_3')\n\n    parameters = []\n    \n    # build parameters list for 'post_data_1' call\n    parameters.append({\n        'index': \"\",\n        'host': \"aws_phantom\",\n        'source_type': \"Automation/Orchestration Platform\",\n        'data': formatted_data_1,\n        'source': \"Phantom\",\n    })\n\n    phantom.act(\"post data\", parameters=parameters, app={ \"name\": 'Splunk' }, callback=decision_2, name=\"post_data_1\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "def Post_Start_Event_to_Splunk(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('post_data_1() called')\n    import platform\n    import uuid\n\n    # collect data for 'post_data_1' call\n    formatted_data_1 = phantom.get_format_data(name='format_3')\n\n    parameters = []\n    \n    splunk_status_index_list = phantom.collect(container, \"artifact:*.cef.splunk_status_index\")\n    if len(splunk_status_index_list) > 0:\n        splunk_status_index = str(splunk_status_index_list[0])\n    else:\n        splunk_status_index = \"default\"\n    \n    splunk_status_source_type_list = phantom.collect(container, \"artifact:*.cef.splunk_status_source_type\")\n    if len(splunk_status_source_type_list) > 0:\n        splunk_status_source_type = str(splunk_status_source_type_list[0])\n    else:\n        splunk_status_source_type = \"advsim:atr\"\n    \n    try:\n        guid = phantom.collect(container, \"artifact:*.cef.request\")[0]\n    except:\n        guid = uuid.uuid4().hex\n    playbook_info = phantom.get_playbook_info()\n    phantom.save_data(guid, playbook_info[0]['id'])\n    source = playbook_info[0]['name']\n    data = {}\n    data['msg'] = formatted_data_1\n    data['guid'] = guid\n    data['playbook_info'] = playbook_info[0]\n    data_json = json.dumps(data)\n\n    # build parameters list for 'post_data_1' call\n    parameters.append({\n        'index': splunk_status_index,\n        'host': platform.node(),\n        'source_type': splunk_status_source_type,\n        'data': data_json,\n        'source': source,\n    })\n\n    phantom.act(\"post data\", parameters=parameters, app={ \"name\": 'Splunk' }, callback=decision_2, name=\"Post_Start_Event_to_Splunk\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "Post Start Event to Splunk",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "dbbfadf6-e620-470a-9c80-7555fe5e80f4",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 327,
                        "line_start": 279,
                        "message": "Configuring now",
                        "name": "post data",
                        "notes": "",
                        "number": 1,
                        "order": 13,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 400,
                            "y": 180
                        },
                        "previous_function": "",
                        "previous_name": "Post_Start_Event_to_Splunk",
                        "required_params": {
                            "data": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_config",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 332
                    },
                    {
                        "action": "run script",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "async": "",
                            "command_id": "",
                            "ip_hostname": "artifact:*.cef.destinationAddress",
                            "parser": "",
                            "script_file": "",
                            "script_str": "format_1:formatted_data",
                            "shell_id": ""
                        },
                        "angle": 0,
                        "app": "Windows Remote Management",
                        "appid": "a0222b95-b006-4c9e-9578-1428defcec0f",
                        "approver": "",
                        "assets": [
                            {
                                "action": "run script",
                                "active": true,
                                "app_name": "Windows Remote Management",
                                "app_version": "1.0.15",
                                "appid": "",
                                "config_type": "app",
                                "fields": {
                                    "async": "",
                                    "command_id": "",
                                    "ip_hostname": "artifact:*.cef.destinationAddress",
                                    "parser": "",
                                    "script_file": "",
                                    "script_str": "Format_Start_Marker:formatted_data",
                                    "shell_id": ""
                                },
                                "has_app": true,
                                "id": 128,
                                "loaded": false,
                                "missing": false,
                                "name": "Windows Remote Management",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.async",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.parameter.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_path": "action_result.parameter.ip_hostname",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.parser",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.script_file",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.script_str",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.parameter.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_err",
                                        "data_type": "string",
                                        "example_values": [
                                            "Error message"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_out",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successful output"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.summary.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.summary.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Message",
                                        "column_order": 0,
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "async": {
                                        "data_type": "boolean",
                                        "default": false,
                                        "description": "Start the command, but don't wait for output",
                                        "key": "async",
                                        "order": 4,
                                        "required": false
                                    },
                                    "command_id": {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Command ID of async command (Provide with shell_id)",
                                        "key": "command_id",
                                        "order": 5,
                                        "primary": true,
                                        "required": false
                                    },
                                    "ip_hostname": {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP/Hostname",
                                        "key": "ip_hostname",
                                        "order": 0,
                                        "required": true
                                    },
                                    "parser": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a custom parser to use for output",
                                        "key": "parser",
                                        "order": 3,
                                        "primary": true,
                                        "required": false
                                    },
                                    "script_file": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a PowerShell script to run",
                                        "key": "script_file",
                                        "order": 1,
                                        "primary": true,
                                        "required": false
                                    },
                                    "script_str": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "A PowerShell script to run",
                                        "key": "script_str",
                                        "order": 2,
                                        "primary": true,
                                        "required": false
                                    },
                                    "shell_id": {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Shell ID of async command (Provide with command_id)",
                                        "key": "shell_id",
                                        "order": 6,
                                        "required": false
                                    }
                                },
                                "product_name": "Windows Remote Management",
                                "product_vendor": "Microsoft",
                                "type": ""
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Run Start Marker"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Run_Start_Marker(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('Run_Start_Marker() called')\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Run_Start_Marker' call\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.destinationAddress', 'artifact:*.id'])\n    formatted_data_1 = phantom.get_format_data(name='Format_Start_Marker')\n\n    parameters = []\n    \n    # build parameters list for 'Run_Start_Marker' call\n    for container_item in container_data:\n        if container_item[0]:\n            parameters.append({\n                'shell_id': \"\",\n                'parser': \"\",\n                'ip_hostname': container_item[0],\n                'async': \"\",\n                'script_str': formatted_data_1,\n                'script_file': \"\",\n                'command_id': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': container_item[1]},\n            })\n\n    phantom.act(\"run script\", parameters=parameters, app={ \"name\": 'Windows Remote Management' }, callback=Format_ART_Command, name=\"Run_Start_Marker\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Post Start Event to Splunk",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Run Start Marker",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "d10b425d-717c-478a-8fe3-c484a18ff770",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 357,
                        "line_start": 327,
                        "message": "Configuring now",
                        "name": "run script",
                        "notes": "",
                        "number": 2,
                        "order": 14,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 780,
                            "y": 60
                        },
                        "previous_function": "",
                        "previous_name": "Run_Start_Marker",
                        "required_params": {
                            "ip_hostname": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_config",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 334
                    },
                    {
                        "action": "run command",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "arguments": "filtered-data:filter_1:condition_1:format_command_1:action_result.data.*.executor.command",
                            "async": "True",
                            "command": "filtered-data:filter_1:condition_1:format_command_1:action_result.data.*.executor.command",
                            "command_id": "",
                            "ip_hostname": "write_started_event:action_result.parameter.ip_hostname",
                            "parser": "",
                            "shell_id": ""
                        },
                        "angle": 0,
                        "app": "Windows Remote Management",
                        "appid": "a0222b95-b006-4c9e-9578-1428defcec0f",
                        "approver": "",
                        "assets": [
                            {
                                "action": "run command",
                                "active": true,
                                "app_name": "Windows Remote Management",
                                "app_version": "1.0.12",
                                "appid": "",
                                "config_type": "app",
                                "fields": {
                                    "arguments": "filtered-data:filter_1:condition_1:Format_ART_Command:action_result.data.*.executor.command",
                                    "async": "True",
                                    "command": "filtered-data:filter_1:condition_1:Format_ART_Command:action_result.data.*.executor.command",
                                    "command_id": "",
                                    "ip_hostname": "Run_Start_Marker:action_result.parameter.ip_hostname",
                                    "parser": "",
                                    "shell_id": ""
                                },
                                "has_app": true,
                                "id": 128,
                                "loaded": false,
                                "missing": false,
                                "name": "Windows Remote Management",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.arguments",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.async",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "data_path": "action_result.parameter.command",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.parameter.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_path": "action_result.parameter.ip_hostname",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.parser",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.parameter.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_err",
                                        "data_type": "string",
                                        "example_values": [
                                            "Error message"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_out",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successful output"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.summary.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.summary.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Message",
                                        "column_order": 0,
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "arguments": {
                                        "data_type": "string",
                                        "default": "",
                                        "description": "The arguments for the command",
                                        "key": "arguments",
                                        "order": 2,
                                        "required": false
                                    },
                                    "async": {
                                        "data_type": "boolean",
                                        "default": false,
                                        "description": "Start the command, but don't wait for output",
                                        "key": "async",
                                        "order": 4,
                                        "required": false
                                    },
                                    "command": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The command to be run",
                                        "key": "command",
                                        "order": 1,
                                        "required": false
                                    },
                                    "command_id": {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Command ID of async command (Provide with shell_id)",
                                        "key": "command_id",
                                        "order": 5,
                                        "primary": true,
                                        "required": false
                                    },
                                    "ip_hostname": {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP/Hostname",
                                        "key": "ip_hostname",
                                        "order": 0,
                                        "required": true
                                    },
                                    "parser": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a custom parser to use for output",
                                        "key": "parser",
                                        "order": 3,
                                        "primary": true,
                                        "required": false
                                    },
                                    "shell_id": {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Shell ID of async command (Provide with command_id)",
                                        "key": "shell_id",
                                        "order": 6,
                                        "required": false
                                    }
                                },
                                "product_name": "Windows Remote Management",
                                "product_vendor": "Microsoft",
                                "type": ""
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Run Cmd Test"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def cmd_test(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('cmd_test() called')\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'cmd_test' call\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.destinationAddress', 'artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'cmd_test' call\n    for container_item in container_data:\n        if container_item[0]:\n            parameters.append({\n                'ip_hostname': container_item[0],\n                'command': \"\",\n                'arguments': \"\",\n                'parser': \"\",\n                'async': \"\",\n                'command_id': \"\",\n                'shell_id': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': container_item[1]},\n            })\n\n    phantom.act(\"run command\", parameters=parameters, app={ \"name\": 'Windows Remote Management' }, callback=join_format_2, name=\"cmd_test\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 326,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Format ART Command",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Run_Cmd_Test(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('Run_cmd_test() called')\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'cmd_test' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Run_Start_Marker:action_result.parameter.ip_hostname'], action_results=results)\n    filtered_results_data_1 = phantom.collect2(container=container, datapath=[\"filtered-data:filter_1:condition_1:Format_ART_Command:action_result.data.*.executor.command\", \"filtered-data:filter_1:condition_1:Format_ART_Command:action_result.parameter.context.artifact_id\"])\n\n    parameters = []\n    \n    # build parameters list for 'cmd_test' call\n    for results_item_1 in results_data_1:\n        for filtered_results_item_1 in filtered_results_data_1:\n            if results_item_1[0]:\n                parameters.append({\n                    'ip_hostname': results_item_1[0],\n                    'command': filtered_results_item_1[0].split(' ', 1)[0],\n                    'arguments': filtered_results_item_1[0].split(' ', 1)[1],\n                    'parser': \"\",\n                    'async': True,\n                    'command_id': \"\",\n                    'shell_id': \"\",\n                    # context (artifact id) is added to associate results with the artifact\n                    #'context': {'artifact_id': results_item_1[1]},\n                })\n\n    phantom.act(\"run command\", parameters=parameters, app={ \"name\": 'Windows Remote Management' }, callback=join_Format_End_Marker, name=\"Run_Cmd_Test\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "Run Cmd Test",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "93fa5b71-e7df-4e5a-a5ee-9d97082b2c39",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 419,
                        "line_start": 388,
                        "message": "Configuring now",
                        "name": "run command",
                        "notes": "",
                        "number": 1,
                        "order": 16,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1180,
                            "y": 240
                        },
                        "previous_function": "",
                        "previous_name": "Run_Cmd_Test",
                        "required_params": {
                            "ip_hostname": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_config",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 337
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "3ecef6ee-86ed-4910-b463-afb9910c23e2",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d03e9d89-33a7-4962-9248-07388a7629ac",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "24c47fc4-f8f4-485e-bc1f-15be589d7bc4",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "vertices": [
                            {
                                "x": 1680,
                                "y": -200
                            }
                        ],
                        "z": 339
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "Format End Marker"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def format_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('format_2() called')\n    \n    template = \"\"\"eventcreate /id 999 /D \\\"ended test for {0}\\\" /T INFORMATION /L application\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"write_started_event:action_result.parameter.ip_hostname\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_2\")\n\n    write_ended_event(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Run Powershell Test, Run Cmd Test, Run User Supplied Cmd",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Format_End_Marker(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('Format_End_Marker() called')\n    \n    playbook_info = phantom.get_playbook_info()\n    guid = phantom.get_data(playbook_info[0]['id'], clear_data=False)\n    phantom.debug(guid)\n        \n    template = \"eventcreate /id 999 /D \\\"ended test for {0} guid=%s\\\" /T INFORMATION /L application\" % guid\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"Run_Start_Marker:action_result.parameter.ip_hostname\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"Format_End_Marker\")\n\n    Run_End_Marker(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Format End Marker",
                        "description": "",
                        "format": "format",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "4607ee03-c437-4903-9d01-cbff02ae611d",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_Format_End_Marker(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('join_Format_End_Marker() called')\n    \n    # if the joined function has already been called, do nothing\n    if phantom.get_run_data(key='join_Format_End_Marker_called'):\n        return\n\n    # no callbacks to check, call connected block \"Format_End_Marker\"\n    phantom.save_run_data(key='join_Format_End_Marker_called', value='Format_End_Marker', auto=True)\n\n    Format_End_Marker(container=container, handle=handle)\n    \n    return",
                        "join_optional": [
                            "Run_Powershell_Test",
                            "Run_User_Supplied_Cmd",
                            "Run_Cmd_Test"
                        ],
                        "join_start": 439,
                        "line_end": 453,
                        "line_start": 419,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "",
                        "number": 2,
                        "order": 17,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "Run_Start_Marker:action_result.parameter.ip_hostname"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1420,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "Format_End_Marker",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "eventcreate /id 999 /D \"ended test for {0}\" /T INFORMATION /L application",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 340
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "269e362d-3bf7-46a5-bcd9-d68bb61d034a",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e29675fd-9f55-44ff-9301-8429275e8bcf",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "71f118b1-449a-4e57-aad0-fe4d24e25923",
                            "port": "in",
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 341
                    },
                    {
                        "action": "run script",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "async": "",
                            "command_id": "",
                            "ip_hostname": "Run_Start_Marker:action_result.parameter.ip_hostname",
                            "parser": "",
                            "script_file": "",
                            "script_str": "Format_ART_Command:action_result.data.*.executor.command",
                            "shell_id": ""
                        },
                        "angle": 0,
                        "app": "Windows Remote Management",
                        "appid": "a0222b95-b006-4c9e-9578-1428defcec0f",
                        "approver": "",
                        "assets": [
                            {
                                "action": "run script",
                                "active": true,
                                "app_name": "Windows Remote Management",
                                "app_version": "1.0.15",
                                "appid": "a0222b95-b006-4c9e-9578-1428defcec0f",
                                "config_type": "app",
                                "fields": {
                                    "async": "",
                                    "command_id": "",
                                    "ip_hostname": "Run_Start_Marker:action_result.parameter.ip_hostname",
                                    "parser": "",
                                    "script_file": "",
                                    "script_str": "Format_ART_Command:action_result.data.*.executor.command",
                                    "shell_id": ""
                                },
                                "has_app": true,
                                "id": 128,
                                "loaded": false,
                                "missing": false,
                                "name": "Windows Remote Management",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.async",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.parameter.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_path": "action_result.parameter.ip_hostname",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.parser",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.script_file",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.script_str",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.parameter.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_err",
                                        "data_type": "string",
                                        "example_values": [
                                            "Error message"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_out",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successful output"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.summary.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.summary.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Message",
                                        "column_order": 0,
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "async": {
                                        "data_type": "boolean",
                                        "default": false,
                                        "description": "Start the command, but don't wait for output",
                                        "key": "async",
                                        "order": 4,
                                        "required": false
                                    },
                                    "command_id": {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Command ID of async command (Provide with shell_id)",
                                        "key": "command_id",
                                        "order": 5,
                                        "primary": true,
                                        "required": false
                                    },
                                    "ip_hostname": {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP/Hostname",
                                        "key": "ip_hostname",
                                        "order": 0,
                                        "required": true
                                    },
                                    "parser": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a custom parser to use for output",
                                        "key": "parser",
                                        "order": 3,
                                        "primary": true,
                                        "required": false
                                    },
                                    "script_file": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a PowerShell script to run",
                                        "key": "script_file",
                                        "order": 1,
                                        "primary": true,
                                        "required": false
                                    },
                                    "script_str": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "A PowerShell script to run",
                                        "key": "script_str",
                                        "order": 2,
                                        "primary": true,
                                        "required": false
                                    },
                                    "shell_id": {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Shell ID of async command (Provide with command_id)",
                                        "key": "shell_id",
                                        "order": 6,
                                        "required": false
                                    }
                                },
                                "product_name": "Windows Remote Management",
                                "product_vendor": "Microsoft",
                                "type": ""
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Run Powershell Test"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Run_Powershell_Test(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('Run_Powershell_Test() called')\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Run_Powershell_Test' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Run_Start_Marker:action_result.parameter.ip_hostname', 'Run_Start_Marker:action_result.parameter.context.artifact_id'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['Format_ART_Command:action_result.data.*.executor.command', 'Format_ART_Command:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Run_Powershell_Test' call\n    for results_item_1 in results_data_1:\n        for results_item_2 in results_data_2:\n            if results_item_1[0]:\n                parameters.append({\n                    'shell_id': \"\",\n                    'parser': \"\",\n                    'ip_hostname': results_item_1[0],\n                    'async': \"\",\n                    'script_str': results_item_2[0],\n                    'script_file': \"\",\n                    'command_id': \"\",\n                    # context (artifact id) is added to associate results with the artifact\n                    'context': {'artifact_id': results_item_1[1]},\n                })\n\n    phantom.act(\"run script\", parameters=parameters, app={ \"name\": 'Windows Remote Management' }, callback=join_Format_End_Marker, name=\"Run_Powershell_Test\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Format ART Command",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Run Powershell Test",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "8891b45a-715a-40e7-863f-8dc1be3ef024",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 388,
                        "line_start": 357,
                        "message": "Configuring now",
                        "name": "run script",
                        "notes": "",
                        "number": 1,
                        "order": 15,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1180,
                            "y": 120
                        },
                        "previous_function": "",
                        "previous_name": "Run_Powershell_Test",
                        "required_params": {
                            "ip_hostname": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_config",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 343
                    },
                    {
                        "action": "format command",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "attack_id": "artifact:*.cef.act",
                            "input_arguments": "artifact:*.cef.input_arguments",
                            "supported_os": "artifact:*.cef.os",
                            "use_arg_defaults": true
                        },
                        "angle": 0,
                        "app": "Atomic Red Team",
                        "appid": "005e9bff-dfd2-40c8-9845-e32b438c2e93",
                        "approver": "",
                        "assets": [
                            {
                                "action": "format command",
                                "active": true,
                                "app_name": "Atomic Red Team",
                                "app_version": "1.0.0",
                                "appid": "",
                                "config_type": "app",
                                "fields": {
                                    "attack_id": "artifact:*.cef.act",
                                    "input_arguments": "artifact:*.cef.input_arguments",
                                    "supported_os": "artifact:*.cef.os"
                                },
                                "has_app": true,
                                "id": 155,
                                "loaded": false,
                                "missing": false,
                                "name": "Atomic Red Team",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success"
                                        ]
                                    },
                                    {
                                        "column_name": "Formatted Command",
                                        "column_order": 3,
                                        "contains": [
                                            "file name"
                                        ],
                                        "data_path": "action_result.data.*.executor.command",
                                        "data_type": "string",
                                        "example_values": [
                                            "cmd.exe /c \"net use \\\\Target\\C$ P@ssw0rd1 /u:DOMAIN\\Administrator\"\n",
                                            "regsvr32.exe /s /u /i:Regsvr32.sct scrobj.dll\n"
                                        ]
                                    },
                                    {
                                        "column_name": "Shell Type",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.executor.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "command_prompt"
                                        ]
                                    },
                                    {
                                        "column_name": "Attack ID",
                                        "column_order": 0,
                                        "contains": [
                                            "mitre attack id"
                                        ],
                                        "data_path": "action_result.data.*.attack_technique",
                                        "data_type": "string",
                                        "example_values": [
                                            "T1077",
                                            "T1117"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Total tests: 1",
                                            "Total tests: 3"
                                        ]
                                    },
                                    {
                                        "column_name": "Supported OS",
                                        "column_order": 1,
                                        "data_path": "action_result.parameter.supported_os",
                                        "data_type": "string",
                                        "example_values": [
                                            "windows"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "mitre attack id"
                                        ],
                                        "data_path": "action_result.parameter.attack_id",
                                        "data_type": "string",
                                        "example_values": [
                                            "T1077",
                                            "T1117"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.total tests",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1,
                                            3
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.executor.arg_types",
                                        "data_type": "string",
                                        "example_values": [
                                            "Path"
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "attack_id": {
                                        "contains": [
                                            "mitre attack id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "MITRE ATT@CK ID for technique (e.g. T1033)",
                                        "key": "attack_id",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    },
                                    "input_arguments": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "JSON of input arguments",
                                        "key": "input_arguments",
                                        "order": 2,
                                        "primary": false,
                                        "required": false
                                    },
                                    "supported_os": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "OS to format command for",
                                        "key": "supported_os",
                                        "order": 1,
                                        "primary": false,
                                        "required": true,
                                        "value_list": [
                                            "windows",
                                            "macos",
                                            "linux"
                                        ]
                                    }
                                },
                                "product_name": "Atomic Red Team",
                                "product_vendor": "Red Canary",
                                "type": ""
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Format ART Command"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_error.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def format_command_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('format_command_1() called')\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'format_command_1' call\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.os', 'artifact:*.cef.act', 'artifact:*.cef.input_arguments', 'artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'format_command_1' call\n    for container_item in container_data:\n        if container_item[0] and container_item[1]:\n            parameters.append({\n                'supported_os': container_item[0],\n                'attack_id': container_item[1],\n                'input_arguments': container_item[2],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': container_item[3]},\n            })\n\n    phantom.act(\"format command\", parameters=parameters, app={ \"name\": 'Atomic Red Team' }, callback=filter_1, name=\"format_command_1\", parent_action=action)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Run Start Marker",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Format_ART_Command(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('format_command_1() called')\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'format_command_1' call\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.os', 'artifact:*.cef.act', 'artifact:*.cef.input_arguments', 'artifact:*.id'])\n\n    parameters = []\n    # build parameters list for 'format_command_1' call\n    for container_item in container_data:\n        if container_item[0] and container_item[1]:\n            phantom.debug(container_item[1])\n\n            parameters.append({\n                'supported_os': container_item[0],\n                'attack_id': container_item[1],\n                'input_arguments': container_item[2],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': container_item[3]},\n            })\n\n    phantom.act(\"format command\", parameters=parameters, app={ \"name\": 'Atomic Red Team' }, callback=decision_1, name=\"Format_ART_Command\", parent_action=action)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Format ART Command",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "e29675fd-9f55-44ff-9301-8429275e8bcf",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 76,
                        "line_start": 50,
                        "message": "Configuring now",
                        "name": "format command",
                        "notes": "",
                        "number": 1,
                        "order": 3,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 780,
                            "y": 200
                        },
                        "previous_function": "",
                        "previous_name": "Format_ART_Command",
                        "required_params": {
                            "attack_id": true,
                            "supported_os": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_config",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 344
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-2": {
                                "port": {
                                    "id": "out-3",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": -2
                            },
                            ".outPorts>.port-2>.port-body": {
                                "port": {
                                    "id": "out-3",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('decision_1() called')\n\n    # check for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Format_ART_Command:action_result.data.*.executor.name\", \"==\", \"powershell\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched_artifacts_1 or matched_results_1:\n        Run_Powershell_Test(action=action, success=success, container=container, results=results, handle=handle)\n        return\n\n    # check for 'elif' condition 2\n    matched_artifacts_2, matched_results_2 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Format_ART_Command:action_result.data.*.executor.name\", \"==\", \"command_prompt\"],\n        ])\n\n    # call connected blocks if condition 2 matched\n    if matched_artifacts_2 or matched_results_2:\n        Run_Cmd_Test(action=action, success=success, container=container, results=results, handle=handle)\n        return\n\n    # call connected blocks for 'else' condition 3\n    Run_User_Supplied_Cmd(action=action, success=success, container=container, results=results, handle=handle)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Format ART Command",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "71f118b1-449a-4e57-aad0-fe4d24e25923",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 124,
                        "line_end": 50,
                        "line_start": 16,
                        "name": "decision",
                        "notes": "",
                        "number": 1,
                        "order": 2,
                        "outPorts": [
                            "out-1",
                            "out-2",
                            "out-3"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "Format_ART_Command:action_result.data.*.executor.name",
                                        "value": "powershell"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "Format_ART_Command:action_result.data.*.executor.name",
                                        "value": "command_prompt"
                                    }
                                ],
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1040,
                            "y": 120
                        },
                        "previous_function": "",
                        "previous_name": "decision_1",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 345
                    }
                ]
            },
            "notes": ""
        },
        "schema": 3,
        "version": "4.2.7532"
    },
    "create_time": "2019-07-03T18:53:10.832212+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}